const alias = require('./aliases.config.js'),
    path = require('path'),
    webpack = require('webpack'),
    ExtractTextPlugin = require("extract-text-webpack-plugin"),
    HtmlWebpackPlugin = require('html-webpack-plugin'),
    CopyWebpackPlugin = require('copy-webpack-plugin'),
    TerserPlugin = require('terser-webpack-plugin'),
    //BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin,
    CompressionPlugin = require('compression-webpack-plugin'),
    HtmlWebpackChangeAssetsExtensionPlugin = require('html-webpack-change-assets-extension-plugin')

let config = {
    entry: {
        app: ['./src/app/App.tsx'],
        vendor: ['react', 'react-dom']
    },
    output: {
        path: path.resolve(__dirname, 'public'),
        filename: 'js/[name].bundle.js',
        publicPath : '/'
    },
    devtool: 'source-map',
    resolve: {
        extensions: ['.js', '.jsx', '.json', '.ts', '.tsx'],
        alias
    },
    module: {
        rules: [
            {
                test: /\.(ts|tsx)$/,
                loader: 'ts-loader'
            },
            {
                test: /\.scss$/,
                  use: [{
                    loader: "style-loader"
                  }, {
                    loader: "css-loader" 
                  }, {
                    loader: "sass-loader"
                  }]
            },
            { enforce: "pre", test: /\.js$/, loader: "source-map-loader" }
        ]
    },
    plugins: [
        
        new HtmlWebpackPlugin({
            jsExtension: ".gz",
            template: path.resolve(__dirname, 'src', 'app', 'index.html') 
        }),
        // new CompressionPlugin(),
        new webpack.optimize.ModuleConcatenationPlugin(),
        // new HtmlWebpackChangeAssetsExtensionPlugin(),
        new CopyWebpackPlugin([
            { from: './src/static' }
        ])
        //new BundleAnalyzerPlugin()

    ],
    node: {
        fs: 'empty',
        net: 'empty',
        dns: 'empty',
        tls: 'empty'
    }
}

module.exports = (env, argv) => {

    if (argv.mode === 'development') {
      config.devtool = 'source-map';
      config.devtool = argv.mode;
    }
  
    if (argv.mode === 'production') {
      //...
        config.devtool = argv.mode;
        config.optimization = {
            minimizer: [new TerserPlugin()]
        };

        config.plugins.push(new webpack.DefinePlugin({ // <-- key to reducing React's size
            'process.env': {
                'NODE_ENV': JSON.stringify('production')
            }
        }));
    }

    //config.plugins.push(); 
    return config;
  };
